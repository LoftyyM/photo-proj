import Head from "next/head";
import Image from "next/image";
import { Inter } from "next/font/google";
import Link from "next/link";
import { Tab } from "@headlessui/react";
import Masonry from "react-masonry-css";
import classNames from "classnames";
import { SessionContextProvider } from "@supabase/auth-helpers-react";
import { createClient } from "@supabase/supabase-js";

import { LightGallery } from "lightgallery/lightgallery";
import { useRef } from "react";
import LightGalleryComponent from "lightgallery/react";

// import styles
import "lightgallery/css/lightgallery.css";
import "lightgallery/css/lg-zoom.css";
import "lightgallery/css/lg-thumbnail.css";

// import plugins
import lgThumbnail from "lightgallery/plugins/thumbnail";
import lgZoom from "lightgallery/plugins/zoom";

//IMG testing + BG
import bgIMG from "../public/bgIMG.jpg";
import IMG1 from "../public/photos/IMG-1.jpg";
import IMG2 from "../public/photos/IMG-2.jpg";
import IMG3 from "../public/photos/IMG-3.jpg";
import IMG4 from "../public/photos/IMG-4.jpg";
import IMG5 from "../public/photos/IMG-5.jpg";

const inter = Inter({ subsets: ["latin"] });
const tabs = [
  {
    key: "All",
    display: "All",
  },
  {
    key: "Luis",
    display: "Luisccam",
  },
  {
    key: "Sean",
    display: "Loftyy",
  },
];

export default function Home({ images }: { images: Image[] }) {
  // const lightboxRef = useRef<LightGallery | null>(null);

  return (
    <div className=" h-full bg-[url('../public/bgIMG.jpg')] bg-fixed bg-center bg-cover overflow-auto ">
      <Head>
        <title>PHOTO</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className="h-full"></div>

      <header className="fixed top-0 w-full z-20 flex justify-between items-center h-[70px] px-10 bg-stone-900">
        <span className="uppercase text-md font-medium ">
          Photography Portfolio
        </span>

        <Link
          href="/contact"
          className="rounded-3xl bg-white text-stone-700 px-3 py-2 hover:bg-opacity-90"
        >
          Get in touch
        </Link>
      </header>

      <main className="pt-[110px]">
        <div className="flex flex-col items-center h-full bg-stone-900">
          <Tab.Group>
            <Tab.List className="flex items-center gap-12 sticky top-[70px] ">
              {tabs.map((tab) => (
                <Tab key={tab.key} className="p-2">
                  {({ selected }) => (
                    <span
                      className={classNames(
                        "uppercase",
                        selected ? "text-white" : "text-stone-600"
                      )}
                    >
                      {tab.display}
                    </span>
                  )}
                </Tab>
              ))}
            </Tab.List>
            <Tab.Panels className="h-full bg-stone-900 bg-opacity-80 h-full max-w-[900px] w-full p-2 sm:p-4 my-6">
              <Tab.Panel className="PANEL1">
                {images && images.length > 0 ? (
                  <Masonry
                    breakpointCols={2}
                    className="flex gap-4"
                    columnClassName=""
                  >
                    {images.map((image) => (
                      <MasonryImage key={image.id} image={image} />
                    ))}
                  </Masonry>
                ) : (
                  <p>No images found</p>
                )}

                {/*<LightGalleryComponent
                  onInit={(ref) => {
                    if (ref) {
                      lightboxRef.current = ref.instance;
                    }
                  }}
                  speed={500}
                  plugins={[lgThumbnail, lgZoom]}
                  dynamic
                  dynamicEl={images.map((image) => ({
                    src: image.imageSrc,
                    thumb: image.imageSrc,
                  }))}
                ></LightGalleryComponent>*/}
              </Tab.Panel>

              {/*<Tab.Panel className="PANEL2">
                <Masonry
                  breakpointCols={3}
                  className="flex gap-4"
                  columnClassName=""
                >
                  {images.map((image) => (
                    <MasonryImage key={image.id} image={image} />
                  ))}
                </Masonry>

                {/*<LightGalleryComponent
                  onInit={(ref) => {
                    if (ref) {
                      lightboxRef.current = ref.instance;
                    }
                  }}
                  speed={500}
                  plugins={[lgThumbnail, lgZoom]}
                  dynamic
                  dynamicEl={images.map((image) => ({
                    src: image.imageSrc,
                    thumb: image.imageSrc,
                  }))}
                ></LightGalleryComponent>
                </Tab.Panel>*/}

              {/*<Tab.Panel className="PANEL3">
                <Masonry
                  breakpointCols={4}
                  className="flex gap-4"
                  columnClassName=""
                >
                  {images.map((image) => (
                    <MasonryImage key={image.id} image={image} />
                  ))}
                </Masonry>

                {/*<LightGalleryComponent
                  onInit={(ref) => {
                    if (ref) {
                      lightboxRef.current = ref.instance;
                    }
                  }}
                  speed={500}
                  plugins={[lgThumbnail, lgZoom]}
                  dynamic
                  dynamicEl={images.map((image) => ({
                    src: image.imageSrc,
                    thumb: image.imageSrc,
                  }))}
                ></LightGalleryComponent>
              </Tab.Panel>*/}
            </Tab.Panels>
          </Tab.Group>
        </div>
      </main>

      <footer className="h-[90px] bg-stone-900 flex justify-center items-center uppercase text-lg font-medium">
        <p> FOOTER PLACEHOLDER </p>
      </footer>
    </div>
  );
}
export async function getStaticProps() {
  const supabaseAdmin = createClient(
    process.env.NEXT_PUBLIC_SUPABASE_URL || "",
    process.env.SUPABASE_SERVICE_ROLE_KEY || ""
  );
  const { data } = await supabaseAdmin.from("images").select("*").order("id");
  return {
    props: {
      images: data,
    },
  };
}

type Image = {
  id: number;
  href: string;
  imageSrc: string;
  name: string;
  username: string;
};

function MasonryImage({ image }: { image: Image }) {
  //  const [isLoading, setLoading] = useState(true);

  return (
    <a href={image.href} className="group">
      <div className="aspect-w-1 aspect-h-1 w-full h-full xl:aspect-w-7 xl-aspect-h-8 overflow-hidden rounded-lg bg-gray-200">
        <Image alt="" src={image.imageSrc} fill />
      </div>
    </a>
  );
}
